/******* Do not edit this file *******
Woody Code Snippets CSS and JS
Saved: Jun 29 2024 | 14:27:34 */
console.log('96.js is loaded');

// https://www.515tech.com/post/visualize-neo4j-graphs-using-d3-html-canvas
// https://gitlab.com/cmg_public/blogs/visualizing-neo4j-graphs-with-d3.js-and-html5-canvas/-/blob/main/index.js?ref_type=heads

/*var activitesUtilisateur = {
    requetes: [
        {
            requeteCypher: {
                requete: "",         // La requÃªte Cypher effectuÃ©e par l'utilisateur
                traduction: "",      // Traduction de la requÃªte Cypher pour une meilleure comprÃ©hension
                captureImgGraphe: "", // Capture d'Ã©cran du graphe associÃ© Ã  la requÃªte
            	date: ""
			},
            sites: [
                {
                    title: "",              
                    pubTitle: "",           
                    classification: "",     
                    genes: [],              
                    DLMOLs: [
                        {
                            name: "",               // Nom de la DLMOL
                            molecules: [
                                {
                                    InChIKey: "",       // InChIKey de la molÃ©cule
                                    SMILES: "",         // SMILES de la molÃ©cule
                                    captureImg2DMol: "",   // Capture d'Ã©cran de la molÃ©cule en 2D
                                    captureImg3DMol: "",   // Capture d'Ã©cran de la molÃ©cule en 3D
                                    captureImgSiteConcatMol: "" // Capture d'Ã©cran du site avec la molÃ©cule concatÃ©nÃ©e
                                }

							]
                        }


					],
					captureImgSite: ""      // Capture d'Ã©cran du site
                }

			],
            proteines: [
                {
                    proteinName: "",            // Nom de la protÃ©ine consultÃ©e
                    geneName: "",               // Nom du gÃ¨ne associÃ© Ã  la protÃ©ine
                    organism: "",               // Organisme auquel appartient la protÃ©ine
                    functionDescription: ""     // Description de la fonction de la protÃ©ine
                }

			],
            molecules: [
                {
                    InChIKey: "",       // InChIKey de la molÃ©cule manipulÃ©e
                    SMILES: ""  		// SMILES de la molÃ©cule manipulÃ©e	
					//captureImg2DMol  :
                }

			]
        }

	]
};*/



let activitesUtilisateur = {
    requetes: []
};

// Fonction pour envoyer une requÃªte HTTP, pour utiliser la mÃ©thode POST et cibler 'store_request2.php'.
/*function sendRequest(activitesUtilisateur) {
  const xhr = new XMLHttpRequest();
  xhr.open("POST", "store_request2.php", true);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

  xhr.onreadystatechange = function () {
    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
      console.log(xhr.responseText);
    }
  };

  const requestData = JSON.stringify({ activitesUtilisateur }); 
  xhr.send("request=" + encodeURIComponent(requestData));
}*/

console.log("waaa waaa")

function saveUserActivities(activities) {
  jQuery.ajax({
    url: ajax_object.ajax_url,
    type: 'POST',
    data: {
      action: 'save_user_activities',
      activities: JSON.stringify(activities)
    },
    success: function(response) {
      console.log('User activities saved:', response);
	  getUserActivities();
    },
    error: function(error) {
      console.error('Error saving user activities:', error);
    }
  });
}

function getUserActivities() {
  jQuery.ajax({
    url: ajax_object.ajax_url,
    type: 'POST',
    data: {
      action: 'get_user_activities'
    },
    success: function(response) {
      if (response.success) {
        const activities = response.data;
        console.log('Retrieved user activities:', activities);
		historyRequests(activities.requetes);

	  } else {
        console.error('Error retrieving user activities:', response.data);
      }
    },
    error: function(error) {
      console.error('Error retrieving user activities:', error);
    }
  });
}

function deleteUserActivity(index) {
  if (confirm("ÃŠtes-vous sÃ»r de vouloir supprimer cette activitÃ© ?")) {
    jQuery.ajax({
      url: ajax_object.ajax_url,
      type: 'POST',
      data: {
        action: 'delete_user_activity',
        index: index
      },
      success: function(response) {
        console.log('User activity deleted:', response);
        getUserActivities(); 
      },
      error: function(error) {
        console.error('Error deleting user activity:', error);
      }
    });
  }
}


const circleSize = 30;
const arrowHeight = 5;
const arrowWidth = 5;


	console.log("ystroppa1");



let flagTest = false;

function appendQueryToHistoryDisplay(activitesUtilisateur) {
    const historyDiv = document.getElementById("history-div");
    let ul = historyDiv.querySelector("ul");

    if (!ul) {
        ul = document.createElement("ul");
        historyDiv.appendChild(ul);
    }

    activitesUtilisateur.requetes.forEach(requestObj => {
        const li = document.createElement("li");
        const requestTime = new Date(requestObj.requeteCypher.date).toLocaleString();
        li.textContent = `${requestTime} : ${requestObj.requeteCypher.requete}`;

        const saveButton = document.createElement("button");
        saveButton.style.backgroundColor = "red";
        saveButton.style.color = "white";
        saveButton.style.marginLeft = "10px";
        saveButton.style.border = "none";
        saveButton.style.padding = "5px 10px";
        saveButton.style.borderRadius = "4px";
        saveButton.style.cursor = "pointer";

        const saveIcon = document.createElement("span");
        saveIcon.className = "save-icon";
        saveIcon.textContent = "ðŸ’¾"; 

        saveButton.appendChild(saveIcon);

        saveButton.addEventListener("click", function() {
            saveUserActivities(activitesUtilisateur);
            flagTest = true;
        });

        li.appendChild(saveButton);
        ul.appendChild(li);
    });
}


const submitQuery = () => {

	clearJSme();
	clearJsmol();
	
	if (!flagTest && activitesUtilisateur.requetes.length > 0) {
        showAlert("Veuillez enregistrer votre requÃªte avant d'en soumettre une nouvelle.", "error");
        return;
    }
	
	console.log("suite1");
	showSpinner();
	const moleculeInfoDiv = document.getElementById("molecule-info");
	moleculeInfoDiv.style.display = "none";
	
	console.log("ystroppa3");

    // Create new, empty objects to hold the nodes and relationships returned by the query results
    let nodeItemMap = {}
    let linkItemMap = {}

    // contents of the query text field
	const cypherString = document.querySelector('#queryContainer').value
		
    // make POST request with auth headers
        let response = fetch(neo4jAjax.ajax_url, {
        method: 'POST',
        // authentication using the username and password of the user in Neo4j
        headers: {
            "Authorization": "Basic " + btoa(`${neo4jAjax.username}:${neo4jAjax.password}`),
            "Content-Type": "application/json",
            "Accept": "application/json;charset=UTF-8",
        },
        // Formatted request for Neo4j's Cypher Transaction API with generated query included
        // https://neo4j.com/docs/http-api/current/actions/query-format/
        // generated query is formatted to be valid JSON for insertion into request body
        body: '{"statements":[{"statement":"' + cypherString.replace(/(\r\n|\n|\r)/gm, "\\n").replace(/"/g, '\\"') + '", "resultDataContents":["graph", "row"]}]}'
    })
        .then(res => res.json())
        .then(data => { // usable data from response JSON

            // if errors present in the response from Neo4j, propagate alert() dialog box with the error
            if (data.errors != null && data.errors.length > 0) {
               showAlert(`Erreur: ${data.errors[0].message} (${data.errors[0].code})`, "error");
            }
			console.log(data);
            // if results within valid data are not null or empty, extract the returned nodes/relationships into nodeItemMap and linkItemMap respectively
            if (data.results != null && data.results.length > 0 && data.results[0].data != null && data.results[0].data.length > 0) {
                let neo4jDataItmArray = data.results[0].data;
                neo4jDataItmArray.forEach(function (dataItem) { // iterate through all items in the embedded 'results' element returned from Neo4j, https://neo4j.com/docs/http-api/current/actions/result-format/
                    //Node
                    if (dataItem.graph.nodes != null && dataItem.graph.nodes.length > 0) {
                        let neo4jNodeItmArray = dataItem.graph.nodes; // all nodes present in the results item
						/*console.log("neo4jNodeItmArray");
						console.log(neo4jNodeItmArray);*/
						
                        neo4jNodeItmArray.forEach(function (nodeItm) {
                            if (!(nodeItm.id in nodeItemMap)) // if node is not yet present, create new entry in nodeItemMap whose key is the node ID and value is the node itself
                                nodeItemMap[nodeItm.id] = nodeItm;
								//nodeItemMap[nodeItm.id]["name"]=nodeItm.properties.id;
								nodeItemMap[nodeItm.id]["properties"]["name"]=nodeItm.properties.id;
                        });
                    }
                    //Link, interchangeably called a relationship
                    if (dataItem.graph.relationships != null && dataItem.graph.relationships.length > 0) {
                        let neo4jLinkItmArray = dataItem.graph.relationships; // all relationships present in the results item
						
						/*console.log("neo4jLinkItmArray");
						console.log(neo4jLinkItmArray);*/
						
                        neo4jLinkItmArray.forEach(function (linkItm) {
                            if (!(linkItm.id in linkItemMap)) { // if link is not yet present, create new entry in linkItemMap whose key is the link ID and value is the link itself
                                // D3 force layout graph uses 'startNode' and 'endNode' to determine link start/end points, these are called 'source' and 'target' in JSON results from Neo4j
                                linkItm.source = linkItm.startNode;
                                linkItm.target = linkItm.endNode;
                                linkItemMap[linkItm.id] = linkItm;
                            }
                        });
                    }
                });
				
					/*if(activitesUtilisateur){
						saveUserActivities(activitesUtilisateur);	
					}*/
									
					activitesUtilisateur = {
						requetes: []
					};
				
					activitesUtilisateur.requetes.push({
					  requeteCypher: {
						requete: cypherString,
						traduction: "...", 
						captureImgGraphe: "",
						date: new Date().toISOString()
					  },
					  sites: [],
					  proteines: [],
					  molecules: []
					});
					
				    appendQueryToHistoryDisplay(activitesUtilisateur);
				
					//saveUserActivities(activitesUtilisateur);
			}
			
			console.log("linkItemMap");
			console.log(linkItemMap);
			
			console.log("nodeItemMap");
			console.log(nodeItemMap);
			
            // update the D3 force layout graph with the properly formatted lists of nodes and links from Neo4j
            //updateGraph(Object.values(nodeItemMap), Object.values(linkItemMap));
			const nodes = Object.values(nodeItemMap);
            const links = Object.values(linkItemMap);
			
			//updateGraphs(nodes,links);
			//ForceGraph({nodes, links});
			
			updateGraph(nodes,links);
			//updateGraphs(Object.values(nodeItemMap), Object.values(linkItemMap));

            /*const formattedData = {
                 nodes: nodes,
                 relationships: links
            };

            neo4jd3Instance.updateWithNeo4jData(formattedData);*/
        }).finally(() => {
		hideSpinner();	
        flagTest = false; // Reset flag after processing
    });
	
	
}

	
//##################################################
function updateGraph(nodes, links) {
  const width = 1070.02;
  const height = 500;

  // extract unique labels from nodes pour le coloring
  const labels = [...new Set(nodes.map((d) => d.labels[0]))];

  //definie color scale bason sur les labels quona.
  const color = d3.scaleOrdinal().domain(labels).range(d3.schemeSet1);

  console.log(color);

  const sequentialColorScale = d3
    .scaleSequential()
    .domain([1, 10])
    .interpolator(d3.interpolatePuRd);
  const categoricalColorScale = d3
    .scaleOrdinal()
    .domain(labels)
    .range(d3.schemeSet3);

  console.log(labels);

  const copiedLinks = links.map((d) => ({ ...d }));
  const copiedNodes = nodes.map((d) => ({ ...d }));

  const simulation = d3
    .forceSimulation(copiedNodes)
    .force(
      "link",
      d3
        .forceLink(copiedLinks)
        .id((d) => d.id)
        .distance(200)
    )
    .force("charge", d3.forceManyBody().strength(-40))
    .force("center", d3.forceCenter(width / 2, height / 2))
    .on("tick", ticked);

  const svg = d3
    .select("#graphSvg")
    .attr("width", width)
    .attr("height", height)
    //.attr("viewBox", [-width / 2, -height / 2, width, height])
    .attr("style", "max-width: 100%; height: auto;")
    .style("background-color", "white");

  //Efface tous les Ã©lÃ©ments existants dans le SVG
  svg.selectAll("*").remove();

  const zoom = d3.zoom().scaleExtent([0.05, 10]).on("zoom", zoomed);

  svg.call(zoom);

  const container = svg.append("g");

  const arrowhead = container
    .append("defs")
    .append("marker")
    .attr("id", "arrowhead")
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 8)
    .attr("refY", 0)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
    .append("path")
    .attr("fill", "LightSlateGray")
    .attr("d", "M0,-5L10,0L0,5");

  const fixedCircles = svg
    .append("g")
    .attr("class", "fixedCircle")
    .attr("transform", `translate(${20},${20})`);

  fixedCircles
    .selectAll("circle")
    .data(labels)
    .enter()
    .append("circle")
    .attr("r", 10)
    .attr("cx", 0)
    .attr("cy", (d, i) => i * 25)
    .attr("fill", (d) => color(d));

  fixedCircles
    .selectAll("text")
    .data(labels)
    .enter()
    .append("text")
    .attr("x", 15)
    .attr("y", (d, i) => 5 + i * 25)
    .text((d) => d);

  const link = container
    .append("g")
    .attr("class", "links")
    .attr("stroke", "#999")
    .attr("stroke-opacity", 1)
    .selectAll("line")
    .data(copiedLinks)
    .join("line")
    .attr("stroke", (d) => color(d.type))
    .attr("marker-end", "url(#arrowhead)")
    .attr("stroke-width", (d) => Math.sqrt(d.value))
    .style("stroke-dasharray", "5,5");

  const node = container
    .append("g")
    .attr("class", "nodes")
    .attr("stroke", "#fff")
    .attr("stroke-width", 1.5)
    .selectAll("circle")
    .data(copiedNodes)
    .join("circle")
    .attr("r", 20)
    .attr("fill", (d) => color(d.labels[0]))
    .style("stroke-dasharray", "3,3")
    .on("mouseover", handleMouseover)
    .on("mousemove", handleMousemove)
    .on("mouseout", handleMouseout)
    .on("click", handleClick);

  const label = container
    .append("g")
    .selectAll()
    .data(copiedNodes)
    .join("text")
    .attr("dy", 30)
    .attr("text-anchor", "middle")
    .text((d) => d.id);

  const tooltip = d3
    .select("body")
    .append("div")
    .attr("id", "tooltip")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("background-color", "#00c2a9")
    .style("color", "#fff")
    .style("padding", "5px")
    .style("border-radius", "5px")
    .style("font-size", "14px");

  node.call(
    d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended)
  );

  // Charge repulsion pour la button <Basculer la RÃ©pulsion>
  let chargeTimeout;
  let chargeStrength = 5;

  document
    .getElementById("toggleRepulsion")
    .addEventListener("mousedown", function () {
      console.log("Strength:", chargeStrength);

      chargeTimeout = setInterval(function () {
        const chargeForce = simulation.force("charge");
        chargeForce.strength(chargeStrength);
        console.log("Strength:", chargeStrength);
        simulation.alpha(1).restart();
      }, 500);
    });

  document
    .getElementById("toggleRepulsion")
    .addEventListener("mouseup", function () {
      clearInterval(chargeTimeout);
    });

  document
    .getElementById("toggleRepulsion")
    .addEventListener("mouseout", function () {
      clearInterval(chargeTimeout);
    });

  //update les positions des link et des nodes
  function ticked() {
    link
      .attr("x1", (d) => d.source.x)
      .attr("y1", (d) => d.source.y)
      .attr("x2", (d) => {
        const dx = d.target.x - d.source.x;
        const dy = d.target.y - d.source.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const unitX = dx / distance;
        const unitY = dy / distance;
        return d.target.x - unitX * 26;
      })
      .attr("y2", (d) => {
        const dx = d.target.x - d.source.x;
        const dy = d.target.y - d.source.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const unitX = dx / distance;
        const unitY = dy / distance;
        return d.target.y - unitY * 26;
      });

    node.attr("cx", (d) => d.x).attr("cy", (d) => d.y);

    label.attr("x", (d) => d.x).attr("y", (d) => d.y);
  }

  function zoomed(event) {
    container.attr("transform", event.transform);
  }

  //********************************************************************

  function dragstarted(event, d) {
    if (!event.active) simulation.alphaTarget(0.3).restart();

    d.fx = event.subject.x;
    d.fy = event.subject.y;

    const minDistanceCircle = d3
      .select(this)
      .append("circle")
      .attr("class", "min-distance-circle")
      .attr("cx", 0)
      .attr("cy", 0)
      .attr("r", 100)
      .attr("stroke", "red")
      .attr("stroke-dasharray", "4")
      .attr("fill", "none");

    copiedLinks.forEach((link) => {
      if (link.source === d) {
        link.target.fx = null;
        link.target.fy = null;
      } else if (link.target === d) {
        link.source.fx = null;
        link.source.fy = null;
      }
    });
  }

  function dragged(event) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  function dragended(event) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;

    d3.select(this).select(".min-distance-circle").remove();
  }

  //*******************************************************************************

  //999999999999999

  // Selection des elements DOM necessaires pour afficher et manipuler le panneau d'information du site
  const moleculeInfoDiv = document.getElementById("molecule-info");
  const jsmolInfoDiv = document.getElementById("jsmol-info-div");
  const infoDiv = document.getElementById("info-div");

  const siteInfoPanel = document.getElementById("site-info-panel");
  const resizeHandle = document.querySelector(".info-panel-resize");
  const closeButton = document.getElementById("closeInfoPanel");
  const header = siteInfoPanel.querySelector(".info-panel-header");
  const siteInfoPanelContent = document.querySelector(".info-panel-content");

  let startX, startY, initialX, initialY, startWidth, startHeight;

  header.addEventListener("mousedown", dragStart);

  document.addEventListener("mousemove", drag);

  document.addEventListener("mouseup", dragEnd);

  function dragStart(e) {
    if (e.target === resizeHandle) {
      startX = e.clientX;
      startY = e.clientY;
      startWidth = parseInt(
        document.defaultView.getComputedStyle(siteInfoPanel).width,
        10
      );
      startHeight = parseInt(
        document.defaultView.getComputedStyle(siteInfoPanel).height,
        10
      );
      document.documentElement.addEventListener("mousemove", resizeDrag, false);
      document.documentElement.addEventListener(
        "mouseup",
        stopResizeDrag,
        false
      );
    } else {
      initialX = e.clientX - siteInfoPanel.offsetLeft;
      initialY = e.clientY - siteInfoPanel.offsetTop;
      document.documentElement.addEventListener("mousemove", drag, false);
      document.documentElement.addEventListener("mouseup", dragEnd, false);
    }
  }

  function drag(e) {
    if (initialX != null && initialY != null) {
      const newX = e.clientX - initialX;
      const newY = e.clientY - initialY;
      siteInfoPanel.style.left = newX + "px";
      siteInfoPanel.style.top = newY + "px";
    }
  }

  function dragEnd() {
    initialX = initialY = null;
    document.documentElement.removeEventListener("mousemove", drag, false);
    document.documentElement.removeEventListener("mouseup", dragEnd, false);
  }

  function resizeDrag(e) {
    siteInfoPanel.style.width = startWidth + e.clientX - startX + "px";
    siteInfoPanel.style.height = startHeight + e.clientY - startY + "px";
  }

  function stopResizeDrag() {
    document.documentElement.removeEventListener(
      "mousemove",
      resizeDrag,
      false
    );
    document.documentElement.removeEventListener(
      "mouseup",
      stopResizeDrag,
      false
    );
  }

  closeButton.addEventListener("click", function () {
    siteInfoPanel.style.display = "none";
  });

  siteInfoPanel.style.display = "none";

  //999999999999999

  //gere les clics sur les nÅ“uds
  function handleClick(event, d) {
    //+++++++++++++++
    const chargeForce = simulation.force("charge");
    chargeForce.strength(-5);
    console.log("strength(-5)");
    simulation.alpha(1).restart();

    console.log("Clicked node:", d.id);
    console.log(d);
    //+++++++++++++++

    //Cacher le siteInfoPanel
    siteInfoPanel.style.display = "none";

    // Si le panneau d'information du site existe
    if (siteInfoPanel) {
      let panelContent = "";
      let headerContent = "";

      moleculeInfoDiv.style.display = "none";
      console.log("Zaza");
      clearJSme();
      disableFirstThreeButtons();

      if (d.properties && d.labels.includes("Site")) {
        // Obtenir les informations du PDB on utilise la fonction getPdbInfo
        getPdbInfo(d.properties.pdb).then((pdbInfo) => {
          const currentRequete =
            activitesUtilisateur.requetes[
              activitesUtilisateur.requetes.length - 1
            ];
          currentRequete.sites.push({
            title: d.properties.pdb,
            pubTitle: pdbInfo.pubTitle,
            classification: pdbInfo.classification,
            genes: pdbInfo.genes,
            DLMOLs: [],
            captureImgSite: "",
          });
			//saveUserActivities(activitesUtilisateur);
          //sendRequest(activitesUtilisateur);
          console.log(activitesUtilisateur);

          headerContent = `
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;"> info sur le site ${d.properties.pdb}</span><br><button id="closeInfoPanel" onclick="closeInfoPanel()">X</button>`;
          panelContent = `
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">ID:</span> <span>${d.id}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Title:</span> <span>${pdbInfo.title}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Publication Title:</span> <span>${pdbInfo.pubTitle}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Classification:</span> <span>${pdbInfo.classification}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Genes:</span> <span>${pdbInfo.genes}</span>
							`;

          siteInfoPanelContent.innerHTML = panelContent;
          header.innerHTML = headerContent;

          siteInfoPanel.style.display = "block";
        });
      } else if (d.properties && d.labels.includes("Protein")) {
        jsmolInfoDiv.style.display = "none";
        infoDiv.style.display = "none";
        clearJsmol();

        // Obtenir les informations UniProt de la protein a partire de la fonction getUniProtInfo
        getUniProtInfo(d.properties.name).then((uniProtInfo) => {
          const currentRequete =
            activitesUtilisateur.requetes[
              activitesUtilisateur.requetes.length - 1
            ];
          currentRequete.proteines.push({
            proteinName: uniProtInfo.proteinName,
            geneName: uniProtInfo.geneName,
            organism: uniProtInfo.organism,
            functionDescription: uniProtInfo.functionDescription,
          });
			//saveUserActivities(activitesUtilisateur);
          //sendRequest(activitesUtilisateur);
          console.log(activitesUtilisateur);

          headerContent = `
									<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">info sur le protein ${d.properties.name}</span><br><button id="closeInfoPanel" onclick="closeInfoPanel()">X</button>`;
          panelContent = `
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">ID:</span> <span>${d.id}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">UniProt Protein:</span> <span>${uniProtInfo.proteinName}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Gene:</span> <span>${uniProtInfo.geneName}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Organism:</span> <span>${uniProtInfo.organism}</span><br>
								<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Function:</span> <span>${uniProtInfo.functionDescription}</span>
							`;

          siteInfoPanelContent.innerHTML = panelContent;
          header.innerHTML = headerContent;

          siteInfoPanel.style.display = "block";
        });
      } else {
        jsmolInfoDiv.style.display = "none";
        infoDiv.style.display = "none";
        clearJsmol();

        headerContent = `
									<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">${d.properties.name}</span><br><button id="closeInfoPanel" onclick="closeInfoPanel()">X</button>`;
        panelContent = `
						<span style="font-size: 16px; font-weight: bold; color: #2a2c33;">ID:</span> <span style="font-size: 16px; font-weight: bold;">${d.id}</span><br>
						<span style="color: #FF0000; font-weight: bold;">Information not available</span>
					`;

        siteInfoPanelContent.innerHTML = panelContent;
        header.innerHTML = headerContent;

        siteInfoPanel.style.display = "block";
      }
    } else {
      console.error(
        "L'Ã©lÃ©ment 'site-info-panel' n'a pas Ã©tÃ© trouvÃ© dans le DOM."
      );
    }

    if (d.labels && d.labels.includes("Molecule")) {
      const smiles =
        d.properties && d.properties.smile ? d.properties.smile.trim() : "";

      const currentRequete =
        activitesUtilisateur.requetes[activitesUtilisateur.requetes.length - 1];
      currentRequete.molecules.push({
        InChIKey: "...",
        SMILES: smiles,
		captureImg2DMol: ""
      });
//saveUserActivities(activitesUtilisateur);
      //sendRequest(activitesUtilisateur);

      if (smiles) {
        console.log(
          `Attempting to load 2D representation for SMILES: ${smiles}`
        );
        load2DRepresentation(smiles);
		enableOnlyJsmeButton();
		  
      } else {
        console.error("SMILES introuvable pour la molecule selectionnee.");
      }
    } else if (d.properties && d.properties.pdb) {
      const pdbName = d.properties.pdb.trim();
      if (pdbName) {
        console.log(`Attempting to load ${pdbName}.pdb`);
        loadPdb(pdbName);
      } else {
        console.error("Nom PDB introuvable pour le nÅ“ud selectionne.");
      }
    } else {
      console.error("Type de nÅ“ud ou propriete inconnu.");
    }

    console.log("fetch : test");

    if (d.properties && d.labels.includes("Site")) {
      const directoryURL = `http://localhost:8080/personnalisation/arbo/pdb_prepared/${d.properties.pdb.trim()}/site_0/dirjson/`;
      console.log("fetch : ", directoryURL);

      // Fetch le contenu du repertoire
      fetch(directoryURL)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Ã‰chec de la rÃ©cupÃ©ration des noms de fichiers");
          }
          if (response.headers.get("content-type").includes("text/html")) {
            return response.text();
          } else {
            throw new Error("un contenue avec un type Unexpected");
          }
        })
        .then((html) => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, "text/html");
          const fileLinks = Array.from(doc.querySelectorAll("a")).map(
            (link) => link.textContent
          );
          console.log("File names:", fileLinks);

          const uniqueNames = [
            ...new Set(
              fileLinks
                .filter((name) => name.startsWith("DLmol_"))
                .map((name) => name.split(".")[0])
            ),
          ];

          infoDiv.innerHTML = `
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">ID: </span><span style="font-size: 16px; font-weight: bold;">${
              d.id
            }</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Name: </span><span style="font-size: 16px; font-weight: bold;">${
              d.properties.name
            }</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Label: </span><span style="font-size: 16px; font-weight: bold;">${
              d.labels[0]
            }</span></p>
						<ul>
							${uniqueNames.map((name) => `<li>${name}</li>`).join("")}
						</ul>
					`;
          jsmolInfoDiv.innerHTML = `
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Name: </span><span style="font-size: 16px; font-weight: bold;">${d.properties.name}</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Label: </span><span style="font-size: 16px; font-weight: bold;">${d.labels[0]}</span></p>
					`;
          infoDiv.style.display = "block";
          jsmolInfoDiv.style.display = "block";

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

          // Cat le fichier pdb qui contien InChIKey.
          function extractMoleculePDB(inchikey, pdbData) {
            const startMarker = `MOL_ID: ${inchikey};`;
            const endMarker = "END";
            const startIndex =
              pdbData.indexOf(startMarker) + startMarker.length;
            const endIndex = pdbData.indexOf(endMarker, startIndex);
            if (startIndex !== -1 && endIndex !== -1) {
              const extractedData = pdbData.substring(
                startIndex,
                endIndex + endMarker.length
              );
              //console.log('Extracted data:', extractedData);
              return extractedData;
            } else {
              console.error(
                "Section moleculaire introuvable dans les donnÃ©es PDB pour InChIKey:",
                inchikey
              );
              return null;
            }
          }

          //cette fonction aide a envoye la partie pdb du InChIKey a l'afficher avec jsme on utilise la fonction loadPdb2
          function loadAndDisplayMoleculePDB(clickedInchikey, dlmolFileName) {
            const pdbURL = `http://localhost:8080/personnalisation/arbo/pdb_prepared/${d.properties.pdb.trim()}/site_0/dirjson/${dlmolFileName}.pdb`;
            console.log("Fetching PDB:", pdbURL);
            fetch(pdbURL)
              .then((response) => {
                if (!response.ok) {
                  throw new Error("echec de la recuperation des donnees PDB");
                }
                return response.text();
              })
              .then((pdbData) => {
                //console.log('PDB data:', pdbData);

                const moleculePDB = extractMoleculePDB(
                  clickedInchikey,
                  pdbData
                );

                //console.log('PDB data:', moleculePDB);
                loadPdb2(moleculePDB);
              })
              .catch((error) => {
                console.error(
                  "Erreur lors de la recuperation ou du traitement des donnÃ©es PDB:",
                  error
                );
              });
          }

          // fonction qui gÃ¨re le clic sur un InChIKey dans la liste
          function handleInchikeyClick(item, dlmolFileName) {
            const clickedInchikeyElement = item.querySelector("p:first-child");
            const clickedInchikey = clickedInchikeyElement.textContent.replace(
              "InCh: ",
              ""
            );
            loadAndDisplayMoleculePDB(clickedInchikey, `${dlmolFileName}.pdb`);
          }

          // affiche les informations des molÃ©cules sÃ©lectionnÃ©es dans des div
          function displaySelectedMoleculeInfo(molecules, name) {
            let inchikeyHTML = `<h5 style="color: black;">InChIKeys & SMILES</h5><ul>`;
            molecules.forEach((molecule) => {
              inchikeyHTML += `<li class="inchikey-item"><p>InCh: ${molecule.properties.inchikey}</p><p>Smile: ${molecule.properties.smile}</p></li>`;
            });
            inchikeyHTML += "</ul>";

            moleculeInfoDiv.innerHTML = inchikeyHTML;
            moleculeInfoDiv.style.display = "block";

            console.log("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");

            const inchikeyItems = document.querySelectorAll(".inchikey-item");
            console.log(inchikeyItems);

            inchikeyItems.forEach((item) => {
              console.log("ssssssssssssssssssssssssss");
              item.addEventListener("click", () => {
                const clickedInchikeyElement =
                  item.querySelector("p:first-child"); 
                const clickedInchikey =
                  clickedInchikeyElement.textContent.replace("InCh: ", ""); 
                const clickedMolecule = molecules.find(
                  (molecule) => molecule.properties.inchikey === clickedInchikey
                );
                if (clickedMolecule) {
                  const clickedSmileElement =
                    item.querySelector("p:nth-child(2)"); 
                  const clickedSmile = clickedSmileElement.textContent.replace(
                    "Smile: ",
                    ""
                  ); 

                  const currentRequete =
                    activitesUtilisateur.requetes[
                      activitesUtilisateur.requetes.length - 1
                    ];
                  console.log("currentRequete", currentRequete);

                  const currentSite =
                    currentRequete.sites[currentRequete.sites.length - 1];
                  console.log("currentSite", currentSite);

                  const currentDLMOL = currentSite.DLMOLs.find(
                    (dlmol) => dlmol.name === name
                  );
                  console.log("currentDLMOL", currentDLMOL);

                  if (currentDLMOL && currentDLMOL.molecules) {
                    currentDLMOL.molecules.push({
                      InChIKey: clickedInchikey,
                      SMILES: clickedSmile,
                      captureImg2DMol: "",
                      captureImg3DMol: "",
                      captureImgSiteConcatMol: "",
                    });
                  } else {
                    console.error(
                      "Impossible de trouver l objet DLMOL correspondant dans l objet activitesUtilisateur."
                    );
                  }
//saveUserActivities(activitesUtilisateur);
                  //sendRequest(activitesUtilisateur);
                  console.log(activitesUtilisateur);

                  loadAndDisplayMoleculePDB(clickedInchikey, name);
                  console.log("clickedInchikey RHIABI: " + clickedInchikey);
                  console.log("clickedSmile RHIABI: " + clickedSmile);

                  jsmolInfoDiv.innerHTML = `
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Name: </span><span style="font-size: 16px; font-weight: bold;">${d.properties.name}</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Label: </span><span style="font-size: 16px; font-weight: bold;">${d.labels[0]}</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Inchikey : </span><span style="font-size: 16px; font-weight: bold;">${clickedInchikey}</span></p>
						<p><span style="font-size: 16px; font-weight: bold; color: #2a2c33;">Smile : </span><span style="font-size: 16px; font-weight: bold;">${clickedSmile}</span></p>
					`;

                  load2DRepresentation(clickedSmile);
                  enableFirstThreeButtons();
                }
              });
            });
          }

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

          uniqueNames.forEach((name) => {
            infoDiv.querySelectorAll("li").forEach((li) => {
              if (li.textContent === name) {
                li.addEventListener("click", () => {
				  showSpinner();	
                  console.log("Clicked file name:", name);

                  const currentRequete =
                    activitesUtilisateur.requetes[
                      activitesUtilisateur.requetes.length - 1
                    ];
                  const currentSite =
                    currentRequete.sites[currentRequete.sites.length - 1];

                  currentSite.DLMOLs.push({
                    name: name,
                    molecules: [],
                  });
//saveUserActivities(activitesUtilisateur);
                  //sendRequest(activitesUtilisateur);
                  console.log(activitesUtilisateur);

                  const jsonURL = `http://localhost:8080/personnalisation/arbo/pdb_prepared/${d.properties.pdb.trim()}/site_0/dirjson/${name}.json`;
                  console.log("Fetching JSON:", jsonURL);

                  fetch(jsonURL)
                    .then((response) => {
                      if (!response.ok) {
                        throw new Error("Failed to fetch JSON data");
                      }
                      return response.json();
                    })
                    .then((data) => {
                      console.log("JSON data:", data);

                      displaySelectedMoleculeInfo(data.molecules, name);
                      const inchikeys = data.molecules.map(
                        (molecule) => molecule.properties.inchikey
                      );
                      console.log("InChIKeys:", inchikeys);
                    })
                    .catch((error) => {
                      console.error(
                        "Erreur lors de la recuperation ou du traitement des donnees JSON:",
                        error
                      );
                    })
					.finally(() => {
					  hideSpinner();
				  });
                });
              }
            });
          });
        })
        .catch((error) => {
          console.error(
            "Erreur lors de la recuperation ou du traitement de la reponse HTML:",
            error
          );
        });
    } else {
      console.error("not a site");
    }
  }

  //recupere les info complementaire des site
  function getPdbInfo(pdbName) {
    console.log("pdbName:", pdbName);
    return fetch(`https://data.rcsb.org/rest/v1/core/entry/${pdbName}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`Error ${response.status} while fetching PDB data.`);
        }
        return response.json();
      })
      .then((data) => {
        return {
          title: data.struct.title,
          pubTitle: data.citation[0].title,
          classification: data.struct_keywords.pdbx_keywords,
          genes: data.struct_keywords.text,
        };
      })
      .catch((error) => {
        console.error(error.message);
        return {};
      });
  }

  //recupere les info complementaire des protein
  function getUniProtInfo(accession) {
    console.log("accession:", accession);
    return fetch(
      `https://www.ebi.ac.uk/proteins/api/proteins?offset=0&size=100&accession=${accession}`,
      {
        headers: {
          Accept: "application/json",
        },
      }
    )
      .then((response) => {
        if (!response.ok) {
          throw new Error(
            `Error ${response.status} while fetching UniProt data.`
          );
        }
        return response.json();
      })
      .then((data) => {
        const entry = data[0];
        const proteinName = entry.protein.recommendedName.fullName.value;
        const geneName = entry.gene[0].name.value;
        const organism = entry.organism.names[0].value;
        const functionDescription = entry.comments.find(
          (comment) => comment.type === "FUNCTION"
        );

        return {
          proteinName: proteinName,
          geneName: geneName,
          organism: organism,
          functionDescription: functionDescription
            ? functionDescription.text[0].value
            : "Function information not available",
        };
      })
      .catch((error) => {
        console.error(error.message);
      });
  }

  function handleMouseover(event, d) {
    d3.select(this).attr("fill", "#ff5733");
  }

  function handleMousemove(event) {
    tooltip
      .style("top", event.pageY - 10 + "px")
      .style("left", event.pageX + 10 + "px");
  }

  function handleMouseout(event, d) {
    d3.select(this).attr("fill", (d) => color(d.labels[0]));
    tooltip.style("visibility", "hidden");
  }

 


  //sendRequest(activitesUtilisateur);

  console.log(activitesUtilisateur);

  //invalidation.then(() => simulation.stop());
  setTimeout(() => {}, 4000);

	// Event listener to handle actions before the page is refreshed or closed
	/*window.addEventListener('beforeunload', (event) => {
		// Save the current state of user activities
		saveUserActivities(activitesUtilisateur);

		// Optionally, display a confirmation dialog to the user
		event.preventDefault();
		event.returnValue = ''; // Chrome requires returnValue to be set
	});*/
	
	  console.log("getUserActivities");
	  //getUserActivities();
	
}

function responsiveSvgSizer() {
    const svg = d3.select('#graphSvg');
    const rect = svg.node().parentNode.getBoundingClientRect();
    const dpr = window.devicePixelRatio;

    svg.attr("width", rect.width * dpr)
        .attr("height", 600 * dpr)
        .style("width", `${rect.width}px`)
        .style("height", `${600}px`);
	
}